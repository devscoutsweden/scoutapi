== README

This README would normally document whatever steps are necessary to get the
application up and running.

Things you may want to cover:

* Ruby version

* System dependencies

* Configuration

* Database creation

* Database initialization

* How to run the test suite

* Services (job queues, cache servers, search engines, etc.)

* Deployment instructions

* ...


Please feel free to use a different markup language if you do not plan to run
<tt>rake doc:app</tt>.

== Working with Test Server

0. Log in as devscout on devscout.mikaelsvensson.info using SSH

    devscout@test:~$ cd /home/devscout/rails-apps/scoutapi

1. Get latest source code

    devscout@test:~/rails-apps/scoutapi$ git pull

2. Make sure the database connection string is stored in the environment variable DATABASE_URL.

    devscout@test:~/rails-apps/scoutapi$ export DATABASE_URL=postgresql://USERNAME:PASSWORD@localhost/DATABASE

3. Stop application

    devscout@test:~/rails-apps/scoutapi$ kill -9 $(cat tmp/pids/server.pid)

4. Migrate database

    devscout@test:~/rails-apps/scoutapi$ bin/rake db:migrate

5. Start application in development mode (first option) or test mode (second option)

    devscout@test:~/rails-apps/scoutapi$ bin/rails server -p 10081 -d

    devscout@test:~/rails-apps/scoutapi$ bin/rails server -p 10081 -d -e test

== Working with Heroku

Pushing to Heroku

    $ git push --progress heroku dev:master

    Fetching repository, done.
    Counting objects: 128, done.
    Delta compression using up to 2 threads.
    Compressing objects: 100% (83/83), done.
    Writing objects: 100% (90/90), 11.35 KiB | 0 bytes/s, done.
    Total 90 (delta 46), reused 0 (delta 0)
    -----> Ruby app detected
    -----> Compiling Ruby/Rails
    ...
    -----> Launching... done, v16
           http://infinite-forest-4832.herokuapp.com/ deployed to Heroku
    To git@heroku.com:infinite-forest-4832.git
       ddb6edc..e7b744c  dev -> master

Migrating database

    $ heroku run exec rake db:migrate

    Running `exec rake db:migrate` attached to terminal... up, run.5847
    ...
    Migrating to CreateUserApiKeys (20140927123626)
    == 20140927123626 CreateUserApiKeys: migrating ================================
    -- create_table(:user_api_keys)
       -> 0.3339s
    -- add_reference(:user_api_keys, :user, {:index=>true})
       -> 0.0143s
    -- add_index(:user_api_keys, :key, {:unique=>true})
       -> 0.0084s
    == 20140927123626 CreateUserApiKeys: migrated (0.3571s) =======================

Checking logs

    $ heroku logs

== Versioning of Activities and Comments

The data model is designed to support an unlimited number of revisions/versions
of each activity. The primary benefit of this is that one version can be
"published" while another is being "reviewed". Another benefit is that automatic
data import jobs can add new revisions instead of updating the current revision,
thus preventing the import job from overwriting manual changes made by users.

Since very few people will be interested in old revisions of activities or
comments, the default behaviour should be to always return the latest revision
and nothing else.

Some pieces of data will however not be revision-specific, such as the creator
of an activity or the activity's comments. By default, the API should present
an activity as the "non-versioned activity data merged with the most-recent
versioned data". The user will not be aware that the activity information is
fetched from multiple tables. It should, however, be possible for a user to
explicitly retrieve all revisions of an activity or comment.

== API Usage

You can view all URLs by visiting /api, e.g. http://127.0.0.1:3000/api.

=== API Keys and User Credentials

Almost all parts of the API is protected from unauthorized access by means of
API keys. Each API request must have an API key specified in the Authorization
http header:

    Authorization: Token token="4d7a9ae16d0092c35f63"

API keys allow the system to keep track of client interactions, including
auditing and permissions. Acquiring an API key is very simple: Just create a new
user account by sending a POST request to the /api/v1/users URL. This will
create an anonymous user and the server response will include the API key for
the newly created user. The client must remember to store the returned API key
as there is (currently) no way of retrieving it later on.

A sample request for creating a new user is found further down this document.

The server will response with this error message if a token has not been
specified, or if it is incorrect:

    HTTP/1.1 401 Unauthorized
    WWW-Authenticate: Token realm="Application"
    Content-Type: text/html; charset=utf-8

    HTTP Token: Access denied.

=== Response Compression

The server supports response compression using deflate or gzip. Simply add the
Accept-Encoding header to your request, as shown in the samples below:

Requesting the response to be uncompressed (using the http client "curl"):

    curl --output scoutapi.flat --header "Authorization: Token token=\"85df3deb58\"" http://devscout.mikaelsvensson.info:10081/api/v1/activities?age_1=8&age_2=9

...will return 974232 bytes (at the time of testing)

Requesting the response to be "gzip compressed" (using the http client "curl"):

    curl --output scoutapi.gzip --header "Authorization: Token token=\"85df3deb58\"" --header "Accept-Encoding: gzip" http://devscout.mikaelsvensson.info:10081/api/v1/activities?age_1=8&age_2=9

...will return 241437 bytes (roughly 75% less than the uncompressed response)

Requesting the response to be "deflate compressed" (using the http client "curl"):

    curl --output scoutapi.deflate --header "Authorization: Token token=\"85df3deb58\"" --header "Accept-Encoding: deflate" http://devscout.mikaelsvensson.info:10081/api/v1/activities?age_1=8&age_2=9

...will return 241419 bytes (roughly 75% less than the uncompressed response)

=== Returning limited set of attributes for activities

In order to save bandwidth, it is possible to limit the number of attributes
returned for activities. There are three options:

1) Set the attrs parameter to "limited" and get a small set of predefined
attributes for each activity. This includes attributes which are commonly
presented to end-users on search result screens.

    {
       "id": 23,
       "revision_id": 130,
       "favourite_count": 0,
       "name": "Updated Test Activity 5",
       "descr_introduction": null,
       "featured": null,
       "age_max": 25,
       "age_min": 19,
       "participants_max": 10,
       "participants_min": 5,
       "time_max": 60,
       "time_min": 30,
       "categories":    [
                {
             "id": 3,
             "group": "scout-concept",
             "name": "Andakt, stilla stund",
             "updated_at": "2014-09-06T07:49:41.384Z"
          },
          ...
       ]
    }

2) Set the attrs parameter to a customer set of attributes by specifying each
desired attribute in its own attrs[] parameter. Example: attrs[]=name&attrs[]=descr_main.

    {
       "id": 23,
       "revision_id": 130,
       "favourite_count": 0,
       "name": "Updated Test Activity 5",
       "descr_main": "This is how you do..."
    }

3) Omit the attrs parameter and all attributes will be returned.

    {
       "id": 23,
       "revision_id": 130,
       "favourite_count": 0,
       "name": "Updated Test Activity 5",
       "descr_introduction": null,
       "descr_main": "This is how you do...",
       "descr_material": "Rope, ...",
       "descr_notes": "Remember to...",
       "descr_prepare": "Before you start, ensure that...",
       "descr_safety": "It is important not to...",
       "featured": null,
       "age_max": 25,
       "age_min": 19,
       "participants_max": 10,
       "participants_min": 5,
       "time_max": 60,
       "time_min": 30,
       "published_at": null,
       "status": 3,
       "created_at": "2014-10-04T13:01:37.250Z",
       "categories":    [
                {
             "id": 3,
             "group": "scout-concept",
             "name": "Andakt, stilla stund",
             "updated_at": "2014-09-06T07:49:41.384Z"
          },
          ...
       ],
       "media_files": [],
       "references": []
    }

=== Search for activities

Show all activities:

  GET http://127.0.0.1:3000/api/v1/activities
  Authorization: Token token="4d7a9ae16d0092c35f63"

Show all activities with "water" in their titles:

  GET http://127.0.0.1:3000/api/v1/activities?name=water
  Authorization: Token token="4d7a9ae16d0092c35f63"

Show all activities with "water" in title or one of the description fields:

  GET http://127.0.0.1:3000/api/v1/activities?text=vatten
  Authorization: Token token="4d7a9ae16d0092c35f63"

Show featured (hand-picked by editor) activities with "person" in description:

  GET http://127.0.0.1:3000/api/v1/activities?featured=true&text=person
  Authorization: Token token="4d7a9ae16d0092c35f63"

Show activities from certain categories:

  GET http://127.0.0.1:3000/api/v1/activities?categories[]=1&categories[]=2
  Authorization: Token token="4d7a9ae16d0092c35f63"

  GET http://127.0.0.1:3000/api/v1/activities?categories=1,2
  Authorization: Token token="4d7a9ae16d0092c35f63"

Show activities with certain id numbers:

  GET http://127.0.0.1:3000/api/v1/activities?id[]=1&id[]=2&id[]=12&id[]=23
  Authorization: Token token="4d7a9ae16d0092c35f63"

  GET http://127.0.0.1:3000/api/v1/activities?cid=1,2,12,23
  Authorization: Token token="4d7a9ae16d0092c35f63"


Limit result to a number of random activities matching the conditions (this
example will return five random activites with the word "water" in the title):

  GET http://127.0.0.1:3000/api/v1/activities?name=water&random=5
  Authorization: Token token="4d7a9ae16d0092c35f63"

Show "water" activities suitable for 10-year-old children:

  GET http://127.0.0.1:3000/api/v1/activities?name=water&age_1=10
  Authorization: Token token="4d7a9ae16d0092c35f63"

Searching for activities suitable for people within a certain age range requires
some explaining. The age_1 and age_2 parameters define an age span which
must be within the age span of the activity.

This table shows the age range for a number of activities and whether or not
each activity will be returned/matched given the specified values for different
values of request parameters age_1 and age_2:

    Activity Information----------------    Request Parameters  Activity Is Returned ---
    Activity Name        Min Age Max Age

    Tag                        0      10    age_1=2             Yes
                                            age_1=2  age_2=20   No, since 20 is outside of 0-10 (it does not matter than 2 is within the range).
                                            age_1=2  age_2=5    Yes
                                            age_1=12            No, since 12 is outside of 0-10.
    Cowboys and Indians        5      15    age_1=2             No, since 2 is outside of 5-15.
                                            age_1=5  age_2=10   Yes
                                            age_1=10 age_2=20   No, since 20 is outside of 5-15.
                                            age_1=12            Yes
    I Have Never...           15      99    age_1=20            Yes
                                            age_1=100           No, since 100 is outside of 15-99.

Sample response

  [
    {
      "id": 1,
      "rev_id": 1,
      "name": "Test Activity",
      "descr_introduction": null,
      "descr_main": null,
      "descr_material": null,
      "descr_notes": null,
      "descr_prepare": null,
      "descr_safety": null,
      "featured": null,
      ...
    },
    ...
    ,
       {
       "id": 6,
       "rev_id": 6,
       "name": "Test Activity",
       "descr_introduction": null,
       "descr_main": "This is how you do...",
       "descr_material": "Rope, ...",
       "descr_notes": "Remember to...",
       "descr_prepare": "Before you start, ensure that...",
       "descr_safety": "It is important not to...",
       ...
    }
  ]

=== Create activity

Request

  POST http://127.0.0.1:3000/api/v1/activities HTTP/1.1
  Authorization: Token token="4d7a9ae16d0092c35f63"
  Content-Type: application/json
  {
     "name": "Test Activity",
     "descr_introduction": null,
     "descr_main": "This is how you do...",
     "descr_material": "Rope, ...",
     "descr_notes": "Remember to...",
     "descr_prepare": "Before you start, ensure that...",
     "descr_safety": "It is important not to...",
     "age_max": 25,
     "age_min": 19,
     "participants_max": 10,
     "participants_min": 5,
     "time_max": 60,
     "time_min": 30,
     "categories": [1, 2, 3],
     "references": [123, 456]
  }

The activity's categories/references are specified as arrays of id numbers. This
also means that the categories/references must have been created prior to
updating the activity.

Response if successful

  HTTP/1.1 201 Created
  {
     "id": 11,
     "rev_id": 12,
     "name": "Test Activity",
     "descr_introduction": null,
     "descr_main": "This is how you do...",
     "descr_material": "Rope, ...",
     "descr_notes": "Remember to...",
     "descr_prepare": "Before you start, ensure that...",
     "descr_safety": "It is important not to...",
     ...
  }

Response in case of error

  HTTP/1.1 404 Not Found
  {
    "error": "The requested object does not exist."
  }


=== Read/Show activity

Request to show the most-recent version of activity 11:

  GET http://127.0.0.1:3000/api/v1/activities/11
  Authorization: Token token="4d7a9ae16d0092c35f63"

Response if successful:

  HTTP/1.1 200 OK
  {
    "id": 11,
    "rev_id": 13,
    "name": "Updated Test Activity",
    "descr_introduction": null,
    "descr_main": "This is how you do...",
    "descr_material": "Rope, ...",
    "descr_notes": "Remember to...",
    "descr_prepare": "Before you start, ensure that...",
    "descr_safety": "It is important not to...",
    ...
  }

Request to show all revisions of activity 11, not just the latest:

  GET http://127.0.0.1:3000/api/v1/activities/11?all_versions=true
  Authorization: Token token="4d7a9ae16d0092c35f63"

Response:

  [
     {
        "id": 11,
        "rev_id": 12,
        "name": "Test Activity",
        "descr_introduction": null,
        "descr_main": "This is how you do...",
        "descr_material": "Rope, ...",
        "descr_notes": "Remember to...",
        "descr_prepare": "Before you start, ensure that...",
        "descr_safety": "It is important not to...",
        ...
     },
        {
        "id": 11,
        "rev_id": 13,
        "name": "Updated Test Activity",
        "descr_introduction": null,
        "descr_main": "This is how you do...",
        "descr_material": "Rope, ...",
        "descr_notes": "Remember to...",
        "descr_prepare": "Before you start, ensure that...",
        "descr_safety": "It is important not to...",
        ...
     }
  ]

=== Update activity

Request to update activity 11 with new information (will be saved as new revision of activity):

  PUT http://127.0.0.1:3000/api/v1/activities/11 HTTP/1.1
  Authorization: Token token="4d7a9ae16d0092c35f63"
  Content-Type: application/json
  {
     "name": "Updated Test Activity",
     "descr_introduction": null,
     "descr_main": "This is how you do...",
     "descr_material": "Rope, ...",
     "descr_notes": "Remember to...",
     "descr_prepare": "Before you start, ensure that...",
     "descr_safety": "It is important not to...",
     "age_max": 25,
     "age_min": 19,
     "participants_max": 10,
     "participants_min": 5,
     "time_max": 60,
     "time_min": 30,
     "categories": [1, 2, 3],
     "references": [123, 456]
  }

The activity's categories/references are specified as arrays of id numbers. This
also means that the categories/references must have been created prior to
updating the activity.

Response:

  HTTP/1.1 204 No Content

=== Delete activity

Request to delete activity 11 (all revisions of it):

  DELETE http://127.0.0.1:3000/api/v1/activities/11 HTTP/1.1
  Authorization: Token token="4d7a9ae16d0092c35f63"
  Content-Type: application/json

Response:

  HTTP/1.1 204 No Content

=== Show all categories

Request

  GET "http://127.0.0.1:3000/api/v1/categories"
  Authorization: Token token="4d7a9ae16d0092c35f63"
  Content-Type: application/json

Response

  [
    {
      "id": 1,
      "group": "Scout Program Track",
      "name": "Relationships",
      "status": null,
      "created_at": "2014-08-23T10:32:54.081Z",
      "updated_at": "2014-08-23T10:32:54.081Z",
      "user_id": null
    },
    ...
    {
      "id": 99,
      "group": "scout-track",
      "name": "Ta hand om sin kropp",
      "status": null,
      "created_at": "2014-08-23T11:12:11.023Z",
      "updated_at": "2014-08-23T11:12:11.023Z",
      "user_id": null
    }
  ]

=== Create new category

Request

  POST "/api/v1/categories"
  Authorization: Token token="4d7a9ae16d0092c35f63"
  Content-Type: application/json

  {
    "group": "Scout Program Track",
    "name": "Relationships"
  }

Response if successful

  Status Code: 201 Created

  {
    "id": 4,
    "group": "Scout Program Track",
    "name": "Relationships",
    "status": null,
    "created_at": "2014-08-23T10:32:54.081Z",
    "updated_at": "2014-08-23T10:32:54.081Z",
    "user_id": null
  }

Response if error occurred (example when group and name are not unique)

  Status Code: 422 Unprocessable Entity

  {
    "error": "The input values conflict with another object. Perhaps the name is already taken?"
  }

=== Update a category

Request

  PUT "/api/v1/categories"
  Authorization: Token token="4d7a9ae16d0092c35f63"
  Content-Type: application/json

  {
    "group": "Scout Program Track",
    "name": "Relationships"
  }

Response if successful

  Status Code: 204 No Content

Response if error occurred (example when group and name are not unique)

  Status Code: 422 Unprocessable Entity

  {
    "error": "The input values conflict with another object. Perhaps the name is already taken?"
  }

=== Delete a category

Request

  DELETE "/api/v1/categories/1"
  Authorization: Token token="4d7a9ae16d0092c35f63"
  Content-Type: application/json

Response if successful

  Status Code: 204 No Content

Response if error occurred (example when category does not exist)

  Status Code: 404 Not Found

  {
    "error": "The requested object does not exist."
  }

=== Create user with API key

Request

    POST http://127.0.0.1:3000/api/v1/users HTTP/1.1
    Authorization: Token token="4d7a9ae16d0092c35f63"
    Content-Type: application/json
    {
    	"email": "USER@HOST",
    	"display_name": "Alice"
    }

Response if successful:

    HTTP/1.1 201 Created
    Content-Type: application/json; charset=utf-8

    {
        "api_key":"4d7a9ae16d0092c35f63"
    }

Response if error occurred (example when e-mail address is not unique)

  Status Code: 422 Unprocessable Entity

  {
    "error": "The input values conflict with another object. Perhaps the name is already taken?"
  }

=== Show current user's profile

Request

    GET http://127.0.0.1:3000/api/v1/users/profile HTTP/1.1
    Authorization: Token token="4d7a9ae16d0092c35f63"

Response

    HTTP/1.1 200 OK
    Content-Type: application/json; charset=utf-8
    {
        "email": "USER@HOST",
        "display_name": "Alice"
        "created_at": "2014-09-27T13:50:55.203Z",
        "keys": [{"key": "4d7a9ae16d0092c35f63"}]
    }

=== Show all users and their API keys (only in development mode)

Request

    GET http://127.0.0.1:3000/api/v1/all_api_keys HTTP/1.1

Response (only when server is in development mode)

    HTTP/1.1 200 OK
    Content-Type: application/json; charset=utf-8

    [
       {
            "email": "USER@HOST",
            "display_name": "Alice"
            "keys": [{"key": "4d7a9ae16d0092c35f63"}]
       },
       ...
    ]

=== List current user's favourite activities

This operation returns the user's favoured activities in the form of a list of
activity identifiers.

Request

    GET http://127.0.0.1:3000/api/v1/favourites HTTP/1.1
    Authorization: Token token="d3474c8aad6528cabd3f"

Response

    HTTP/1.1 200 OK
    Content-Type: application/json; charset=utf-8

    [13,62,305,...]

=== Set current user's favourite activities

To simplify the API, all the user's favourites are set at once. There is no API
method for marking/unmarking an individual activity. The operation works by
first deleting all current favourites and then adding the once specified by the
request.

Request

    PUT http://127.0.0.1:3000/api/v1/favourites HTTP/1.1
    Authorization: Token token="d3474c8aad6528cabd3f"
    Content-Type: application/json

    {
        "id": [13,62,305,...]
    }

Response

    HTTP/1.1 204 No Content
